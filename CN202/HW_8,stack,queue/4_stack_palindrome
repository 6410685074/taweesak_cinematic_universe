public interface StackADT
{
  public void push(Object o);
  public Object pop() throws StackEmptyException;
  public int size();
  public boolean isEmpty();
  public Object top() throws StackEmptyException;
}


public class Stack implements StackADT
{
  private Object stackArray[];
  private int top;

  public Stack(int maxSize)
  {
    stackArray = new Object[maxSize];
    top = -1;
  }
  public Stack()
  {
    this(100); // maxSize is 100, by default
  }
  public void push(Object o) throws StackFullException
  {
    if (size() == stackArray.length)
     throw new StackFullException("Stack is full.");
    stackArray[++top] = o;
  }
  public Object pop() throws StackEmptyException
  {
    if (isEmpty())
     throw new StackEmptyException("Stack is empty.");
    return stackArray[top--];
  }
  public int size()
  {
    return top+1;
  }
  public boolean isEmpty()
  {
    return (size() == 0);
  }
  public Object top() throws StackEmptyException
  {
    if (isEmpty())
     throw new StackEmptyException("Stack is empty.");
    return stackArray[top];
  }
}


public class StackEmptyException extends RuntimeException
{
  public StackEmptyException(String err)
  { super(err); }
}


public class StackFullException extends RuntimeException
{
  public StackFullException(String err)
  { super(err); }
}


public class CheckPalindrome
{
  public static void main(String[] args)
  {
     String word = args[0];
     Stack s = new Stack();
     boolean palindrome = true;

     for (int i=0; i<word.length(); i++)
     {  char c = word.charAt(i);
        s.push(new Character(c));
     }

     for (int i=0; i<word.length(); i++)
     {
        Character charObj = (Character) s.pop();
        if (word.charAt(i) != charObj.charValue())
        {
          palindrome = false;
          break;
        }
     }
     if (palindrome)
        System.out.println(word + " is a palindrome.");
     else
        System.out.println(word + " is not a palindrome.");     
  }
}
