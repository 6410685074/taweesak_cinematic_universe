public interface QueueADT
{
  public void insert(Object o);
  public Object remove() throws QueueEmptyException;
  public Object front() throws QueueEmptyException;
  public int size();
  public boolean isEmpty();
  public void reverseQueue();
}


public class Queue implements QueueADT
{
  // instance variables
  private Object[] queArray;
  private int nItems;
  private int front;
  private int rear;

  // constructor
  public Queue(int maxSize)
  { queArray = new Object[maxSize];
    nItems = 0; front = 0; rear = -1;
  }
  public Queue()
  { this(100); }

  // methods
  public void insert(Object o) throws QueueFullException
  { if (nItems == queArray.length)
      throw new QueueFullException("Queue is full");
    rear = (rear + 1) % queArray.length;
    queArray[rear] = o;
    nItems++;
  }
  public Object remove() throws QueueEmptyException
  { if (isEmpty())
      throw new QueueEmptyException("Queue is empty");
    Object temp = queArray[front];
    front = (front + 1) % queArray.length;
    nItems--;
    return temp;
  }

  public Object front() throws QueueEmptyException
  { if (isEmpty())
      throw new QueueEmptyException("Queue is empty");
    return queArray[front];
  }

  public int size()
  { return nItems; }

  public boolean isEmpty()
  { return (nItems == 0); }

  public void reverseQueue()
  {
    Stack s = new Stack();
    while (!isEmpty())
      s.push(remove());
    while (!s.isEmpty())
      insert(s.pop());
  }
}


public class QueueFullException extends RuntimeException
{
  public QueueFullException(String err)
  { super(err); }
}


public class QueueEmptyException extends RuntimeException
{
  public QueueEmptyException(String err)
  { super(err); }
}


public class TestReverseQueue
{
   public static void main(String[] args)
   {
       Queue q = new Queue();
       q.insert(new Integer(4));
       q.insert(new Integer(7));
       q.insert(new Integer(8));
       q.insert(new Integer(3));
       q.insert(new Integer(1));
       q.insert(new Integer(2));

       System.out.println("Before reversing the queue: ");
       System.out.println("Contents of q: [front] --> [rear]");
       Queue  tempQ = new Queue();
       while (!q.isEmpty())
       {
          Integer tempItem = (Integer) q.remove();
          System.out.print(tempItem.intValue() + " ");
          tempQ.insert(tempItem);
       }
       System.out.println();
       // put all items back to q
       while (!tempQ.isEmpty())
          q.insert(tempQ.remove());

       q.reverseQueue();
       System.out.println("After reversing the queue: ");
       System.out.println("Contents of q: [front] --> [rear]");
       while (!q.isEmpty())
          System.out.print(((Integer) q.remove()).intValue() + " ");
       System.out.println();
      
   }
}
