public interface QueueADT
{
  public void insert(Object o);
  public Object remove() throws QueueEmptyException;
  public int size();
  public boolean isEmpty();
  public Object front() throws QueueEmptyException;
}


public class Queue implements QueueADT
{
  // instance variables
  private Object[] queArray;
  private int nItems;
  private int front;
  private int rear;

  // constructors
  public Queue(int maxSize)
  { queArray = new Object[maxSize];
    front = 0;
    rear = -1;
    nItems = 0;
  }
  public Queue()
  {
    this(100); // maxSize = 100 by default
  }

  // methods
  public int size()
  { return nItems;
  }
  private boolean isFull()
  { return (nItems == queArray.length);
  }
  public void insert(Object o) throws QueueFullException
  { if (isFull())
      throw new QueueFullException("Queue is full.");
    if (rear == (queArray.length-1))
    {
      // rear index reaches the end of queArray
      // move all items to the front of queArray 
      for (int i=front; i<=rear; i++)
        queArray[i-front] = queArray[i];
      front = 0;
      rear = nItems-1;
    }
    queArray[++rear] = o;
    nItems++;
  }
  public Object remove() throws QueueEmptyException
  { if (isEmpty())
      throw new QueueEmptyException("Queue is empty.");
    nItems--;
    return queArray[front++];
  }
  public boolean isEmpty()
  { return (nItems == 0);
  }
  public Object front() throws QueueEmptyException
  { if (isEmpty())
      throw new QueueEmptyException("Queue is empty.");
    return queArray[front];
  }
}

public class QueueFullException extends RuntimeException
{
  public QueueFullException(String err)
  { super(err); }
}


public class QueueEmptyException extends RuntimeException
{
  public QueueEmptyException(String err)
  { super(err); }
}
